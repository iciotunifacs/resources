(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[395],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return c},kt:function(){return d}});var o=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=o.createContext({}),p=function(e){var t=o.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(a),d=n,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return a?o.createElement(g,s(s({ref:t},c),{},{components:a})):o.createElement(g,s({ref:t},c))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var p=2;p<r;p++)s[p]=a[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4473:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var o=a(2122),n=a(9756),r=(a(7294),a(3905)),s=["components"],i={sidebar_position:2},l="Syntax",p={unversionedId:"tutorial-basics/syntax",id:"tutorial-basics/syntax",isDocsHomePage:!1,title:"Syntax",description:"Como vimos na se\xe7\xe3o anterior, a ThingML utiliza determinados componentes, que s\xe3o: Thing, Fragment, Configuration, Functions e Properties e Statechart, mostraremos a seguir a estrutura de cada um desses elementos, vale resaltar que nem todo modelo utiliza todos esses componentes, a integra\xe7\xe3o dos componentes varia conforme a complexidade do problema que o modelo visa solucionar.",source:"@site/docs/tutorial-basics/syntax.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/syntax",permalink:"/resources/docs/tutorial-basics/syntax",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/tutorial-basics/syntax.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/resources/docs/tutorial-basics/getting-started"},next:{title:"Compilando Diagrama UML",permalink:"/resources/docs/tutorial-basics/compilando-diagrama-UML"}},c=[],m={toc:c};function u(e){var t=e.components,i=(0,n.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"Como vimos na se\xe7\xe3o anterior, a ThingML utiliza determinados componentes, que s\xe3o: ",(0,r.kt)("strong",{parentName:"p"},"Thing"),", ",(0,r.kt)("strong",{parentName:"p"},"Fragment"),", ",(0,r.kt)("strong",{parentName:"p"},"Configuration"),", ",(0,r.kt)("strong",{parentName:"p"},"Functions e Properties")," e ",(0,r.kt)("strong",{parentName:"p"},"Statechart"),", mostraremos a seguir a estrutura de cada um desses elementos, vale resaltar que nem todo modelo utiliza todos esses componentes, a integra\xe7\xe3o dos componentes varia conforme a complexidade do problema que o modelo visa solucionar."),(0,r.kt)("h1",{id:"hello-world"},"Hello World"),(0,r.kt)("p",null,"Este exemplo foi extraido do reposit\xf3rio de exemplos da ThingML, podendo ser acessado ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ffleurey/ThingMLArduinoDemo/tree/master/1.Basics"},"neste link")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'thing HelloWorld { \n\n    statechart HelloWorld init Greetings {\n    \n        on entry `Serial.begin(9600);` //inicia a porta serial\n    \n        state Greetings {\n                on entry `Serial.println("Hello World!");`  \n        }   \n    }\n}\n\nconfiguration HelloApp\n{\n    instance hello : HelloWorld\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Inicialmente n\xf3s temos a cria\xe7\xe3o da Thing (coisa) ",(0,r.kt)("strong",{parentName:"li"},"HelloWorld"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"        thing HelloWorld \n\n    \n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"O primeiro")," item que temos dentro da thing \xe9 o ",(0,r.kt)("strong",{parentName:"li"},"statechart"),"(m\xe1quina de estados) -  nem sempre ser\xe1 assim, como dito anteriormente a estrutura dos modelos se modifica de acordo com a complexidade - pdemos atribuir qualuqer nome a ele, mas \xe9 interessante ter o mesmo nome da thing, ",(0,r.kt)("strong",{parentName:"li"},"init Greetings")," indica que ele iniciar\xe1 no ",(0,r.kt)("strong",{parentName:"li"},"state Greetings"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"       statechart HelloWorld init Greetings \n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Em seguida n\xf3s temos ",(0,r.kt)("strong",{parentName:"li"},"On entry Serial.begin(9600)"),", Serial begin \xe9 uma refer\xeancia \xe0 linguagem do Arduino, significa que ele configura a taxa de transfer\xeancia em bits por segundo (baud rate) para transmiss\xe3o serial, para comunica\xe7\xe3o com um computador. Um segundo argumento opcional configura o n\xfamero de bits no dado, paridade, e bits de parada (stop bits). Caso esse argumento n\xe3o seja especificado, o padr\xe3o \xe9 8 bits de dados, sem paridade e um stop bit.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"       on entry `Serial.begin(9600);`\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"O ",(0,r.kt)("strong",{parentName:"li"},"state"),", ou seja, o estado no qual o modelo se encontra, a depender do modelo podem existir transi\xe7\xf5es entre mais de um estado, como este \xe9 um exemplo simples, nosso modelo tem somente um estado, de nome ",(0,r.kt)("strong",{parentName:"li"},"Greetings")," (sauda\xe7\xf5es), na entrada deste estado (",(0,r.kt)("strong",{parentName:"li"},"on entry"),") ser\xe1 executado o comando de impress\xe3o ",(0,r.kt)("strong",{parentName:"li"},'Serial.println("Hello World!")'),', ele ir\xe1 imprimir a frase "Hello World" no terminal.')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"      state Greetings\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Saindo da m\xe1quina de estado, nos encontramos agora no componente ",(0,r.kt)("strong",{parentName:"li"},"configuration")," de nome ",(0,r.kt)("strong",{parentName:"li"},"HelloApp"),", poderia ser qualuqer nome, ele \xe9 essencial para a execu\xe7\xe3o do programa, \xe9 nele que instanciaremos nossa thing, criamos uma instancia de nome ",(0,r.kt)("strong",{parentName:"li"},"hello"),' do "tipo" ',(0,r.kt)("strong",{parentName:"li"},"HelloWorld"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    configuration HelloApp {\n    \n        instance hello : HelloWorld\n    }\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A partir dai o programa est\xe1 pronto para ser executado.")),(0,r.kt)("h1",{id:"execu\xe7\xe3o-do-modelo"},"Execu\xe7\xe3o do modelo"),(0,r.kt)("p",null,"1 - Crie uma pasta em um diret\xf3rio qualquer"),(0,r.kt)("p",null,"2 - Abra o vscode"),(0,r.kt)("p",null,"3 - Importe a pasta que acabou de criar"),(0,r.kt)("p",null,"4 - Em seguida, crie um arquivo com o nome de sua prefer\xeancia com exten\xe7\xe3o .thingml"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Cria\xe7\xe3o do arquivo",src:a(6452).Z})),(0,r.kt)("p",null,"5 - Copie e cole o c\xf3digo disponibilizado no exemplo acima."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Escrever o c\xf3digo",src:a(973).Z})),(0,r.kt)("p",null,"6 - Neste exemplo exportaremos a linguagem ThingML pra UML, para isso \xe9 necess\xe1rio a instala\xe7\xe3o da extens\xe3o PlantUML"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Instala\xe7\xe3o da plantUML",src:a(8436).Z})),(0,r.kt)("p",null,"6 - Ap\xf3s a intala\xe7\xe3o da exten\xe7\xe3o \xe9 hora de voltar ao arquivo e  ",(0,r.kt)("strong",{parentName:"p"},'"transformar"')," o c\xf3digo para a plataforma desejada, no nosso caso UML, para isso, basta realizar o seguinte comando: ",(0,r.kt)("strong",{parentName:"p"},'"SHIFT + CTRL + P"'),', uma lista surgir\xe1 no topo do vscode e selecionaremos a op\xe7\xe3o "',(0,r.kt)("strong",{parentName:"p"},"ThingML - Generate PlantUML"),'".'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Convers\xe3o do c\xf3digo para a plataforma UML",src:a(4884).Z})),(0,r.kt)("p",null,"7 -  Em seguida, clique com o bot\xe3o direito na pasta gerada ",(0,r.kt)("strong",{parentName:"p"},'"thingml-gen"')," e escolha a op\xe7\xe3o ",(0,r.kt)("strong",{parentName:"p"},'"Export Workspace Diagrams"')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Export workspace diagram",src:a(4650).Z})),(0,r.kt)("p",null,"8 - Logo ap\xf3s, ser\xe1 exibido outro menu, na parte superior do vscode com as op\xe7\xf5es de exporta\xe7\xe3o, ecolheremos a ",(0,r.kt)("strong",{parentName:"p"},"png")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Export workspace diagram",src:a(9677).Z})),(0,r.kt)("p",null,'9 - Uma pasta chamada "',(0,r.kt)("strong",{parentName:"p"},"out"),'" \xe9 gerada, nela consta nosso arquivo UML'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Export workspace diagram",src:a(6670).Z})),(0,r.kt)("p",null,"10 - A pasta ",(0,r.kt)("strong",{parentName:"p"},"out")," cont\xe9m v\xe1rias subpastas, a \xfanica que nos interessa \xe9 a pasta chamada ",(0,r.kt)("strong",{parentName:"p"},"HelloApp"),", pois \xe9 onde est\xe1 nosso arquivo UML."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Export workspace diagram",src:a(809).Z})),(0,r.kt)("p",null,"Parab\xe9ns! voc\xea acabou de criar e transformar seu primeiro arquivo ThingML."))}u.isMDXComponent=!0},6452:function(e,t,a){"use strict";t.Z=a.p+"assets/images/imgHello-0ad7a8b0581df88d8c10968cf6e369a6.png"},973:function(e,t,a){"use strict";t.Z=a.p+"assets/images/imgHello2-bc6ec95da293f821dfce62a1469489c9.png"},4884:function(e,t,a){"use strict";t.Z=a.p+"assets/images/imgHello3-380cfd67fcc976a24e3a1e00eb28988d.png"},4650:function(e,t,a){"use strict";t.Z=a.p+"assets/images/imgHello4.1-42544d678b837d57434c00d4f6ccec27.png"},9677:function(e,t,a){"use strict";t.Z=a.p+"assets/images/imgHello4-04a85b3ef9af8f4f4f1606d503c94d75.png"},6670:function(e,t,a){"use strict";t.Z=a.p+"assets/images/imgHello5-ce902581a4f8b7d4cb2fe3457199de6f.png"},809:function(e,t,a){"use strict";t.Z=a.p+"assets/images/imgHello6-0d0c2549efd378ebac63a2ebd3dc0c48.png"},8436:function(e,t,a){"use strict";t.Z=a.p+"assets/images/imgPlantUML-6f6f27574c7b412e1946157ecf169945.png"}}]);